from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
import uvicorn
import os
import databases
import sqlalchemy
from pydantic import BaseModel
from typing import List, Optional

###############
# FastAPI Setup
###############

app = FastAPI(title = "Starter API")

port = int(os.getenv('PORT',8000))
reload = bool(os.getenv('RELOAD', 1))
host=str(os.getenv('HOST','0.0.0.0'))

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app = FastAPI()


@app.middleware("http")
async def db_session_middleware(request: Request, call_next):
    response = Response("Internal server error", status_code=500)
    try:
        request.state.db = SessionLocal()
        response = await call_next(request)
    finally:
        request.state.db.close()
    return response



port = int(os.getenv('PORT', 8000))
reload = bool(os.getenv('RELOAD', 1))
host=str(os.getenv('HOST','0.0.0.0'))

##########
# DB Setup
##########

# SQLAlchemy specific code, as with any other app
DATABASE_URL = os.environ.get('DATABASE_URL', '')

if DATABASE_URL and DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

print(f'DATABASE_URL: {DATABASE_URL}')

database = databases.Database(DATABASE_URL)

metadata = sqlalchemy.MetaData()

###############
# DB Tables
###############
transactions = sqlalchemy.Table(
    "transactions",
    metadata,
    sqlalchemy.Column("fraud", sqlalchemy.Float),
    sqlalchemy.Column("trx_datetime", sqlalchemy.String),
    sqlalchemy.Column("trx_unique_id", sqlalchemy.String, primary_key=True),
    sqlalchemy.Column("type_call", sqlalchemy.String),
    sqlalchemy.Column("transaction_type", sqlalchemy.String),
    sqlalchemy.Column("trx_amount_total", sqlalchemy.Float),
    sqlalchemy.Column("md_payer_document_type", sqlalchemy.String),
    sqlalchemy.Column("md_payer_phone_number", sqlalchemy.String),
    sqlalchemy.Column("md_payer_document_number", sqlalchemy.String),
    sqlalchemy.Column("md_payer_email", sqlalchemy.String),
    sqlalchemy.Column("pay_card_iin", sqlalchemy.Float),
    sqlalchemy.Column("pay_card_md_bank", sqlalchemy.String),
    sqlalchemy.Column("pay_card_md_brand", sqlalchemy.String),
    sqlalchemy.Column("pay_card_md_on_us", sqlalchemy.Boolean),
    sqlalchemy.Column("pay_card_md_channel", sqlalchemy.String),
    sqlalchemy.Column("md_trx_channel", sqlalchemy.String),
    sqlalchemy.Column("md_trx_pos_condition", sqlalchemy.Float),
    sqlalchemy.Column("md_trx_operation_code", sqlalchemy.Float),
    sqlalchemy.Column("md_pay_bank_account_owner_document_type", sqlalchemy.String),
    sqlalchemy.Column("md_pay_bank_account_finantial_inst_id", sqlalchemy.String),
    sqlalchemy.Column("md_pay_bank_account_compensation_inst_id", sqlalchemy.String),
    sqlalchemy.Column("md_support_trace_id", sqlalchemy.String),
    sqlalchemy.Column("md_trx_reconciliation_id", sqlalchemy.String),
    sqlalchemy.Column("md_payer_country", sqlalchemy.String),
    sqlalchemy.Column("response_trx_acquirer", sqlalchemy.String),
    sqlalchemy.Column("merchant_on_us", sqlalchemy.Boolean),
    sqlalchemy.Column("md_merchant_store_id", sqlalchemy.Float),
    sqlalchemy.Column("md_merchant_terminal_id", sqlalchemy.Float),
    sqlalchemy.Column("md_merchant_category_code", sqlalchemy.Float),
    sqlalchemy.Column("md_merchant_submerchant_city", sqlalchemy.String),
    sqlalchemy.Column("md_merchant_submerchant_name", sqlalchemy.String),
    sqlalchemy.Column("md_merchant_acquirer_submerchant_id", sqlalchemy.Float),
    sqlalchemy.Column("md_merchant_tributary_document_type", sqlalchemy.String),
    sqlalchemy.Column("md_pay_method", sqlalchemy.String),
    sqlalchemy.Column("trx_installments_number", sqlalchemy.Integer),
    sqlalchemy.Column("predicted_fraud_by_model", sqlalchemy.Float),
    sqlalchemy.Column("predicted_fraud_by_rule_engine", sqlalchemy.Float),
)

rules = sqlalchemy.Table(
    "rules",
    metadata,
    sqlalchemy.Column("rule_id", sqlalchemy.BigInteger, primary_key=True),
    sqlalchemy.Column("title", sqlalchemy.String),
    sqlalchemy.Column("description", sqlalchemy.String, nullable=True),
    sqlalchemy.Column("rule", sqlalchemy.String),
    sqlalchemy.Column("weight", sqlalchemy.Float),
    sqlalchemy.Column("autogenerated", sqlalchemy.Boolean),
    sqlalchemy.Column("active", sqlalchemy.Boolean),
    sqlalchemy.Column("createdAt", sqlalchemy.String, nullable=True),
)

autogeneratedrules = sqlalchemy.Table(
    "autogeneratedrules",
    metadata,
    sqlalchemy.Column("rule_id", sqlalchemy.BigInteger, primary_key=True),
    sqlalchemy.Column("title", sqlalchemy.String),
    sqlalchemy.Column("description", sqlalchemy.String, nullable=True),
    sqlalchemy.Column("rule", sqlalchemy.String),
    sqlalchemy.Column("weight", sqlalchemy.Float),
    sqlalchemy.Column("autogenerated", sqlalchemy.Boolean),
    sqlalchemy.Column("active", sqlalchemy.Boolean),
    sqlalchemy.Column("createdAt", sqlalchemy.String, nullable=True),
)

engine = sqlalchemy.create_engine(
    DATABASE_URL, pool_size=3, max_overflow=0
)
metadata.create_all(engine)


###############
# Table Models
###############

class Transactions(BaseModel):
    fraud: float
    trx_datetime: str
    trx_unique_id: str
    type_call: str
    transaction_type: str
    trx_amount_total: float
    md_payer_document_type: str
    md_payer_phone_number: str
    md_payer_document_number: str
    md_payer_email: str
    pay_card_iin: float
    pay_card_md_bank: str
    pay_card_md_brand: str
    pay_card_md_on_us: bool
    pay_card_md_channel: str
    md_trx_channel: str
    md_trx_pos_condition: float
    md_trx_operation_code: float
    md_pay_bank_account_owner_document_type: str
    md_pay_bank_account_finantial_inst_id: str
    md_pay_bank_account_compensation_inst_id: str
    md_support_trace_id: str
    md_trx_reconciliation_id: str
    md_payer_country: str
    response_trx_acquirer: str
    merchant_on_us: bool
    md_merchant_store_id: float
    md_merchant_terminal_id: float
    md_merchant_category_code: float
    md_merchant_submerchant_city: str
    md_merchant_submerchant_name: str
    md_merchant_acquirer_submerchant_id: float
    md_merchant_tributary_document_type: str
    md_pay_method: str
    trx_installments_number: int
    predicted_fraud_by_model: float
    predicted_fraud_by_rule_engine: float

class Rules(BaseModel):
    rule_id: int
    title: str
    description: Optional[str]
    rule: str
    weight: float
    autogenerated: bool
    active: bool
    createdAt: Optional[str]


###############
# API Endpoints
###############

@app.get('/')
def Home():
    response = RedirectResponse(url='/docs')
    return response


# if __name__ == "__main__":
#     print('port => ', port)
#     print('reload => ', reload)
#     print('host => ', host)
#     uvicorn.run('main:app', port=port, reload=reload, host=host)
